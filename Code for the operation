import tkinter as tk
from tkinter import messagebox, ttk
import numpy as np
import  skfuzzy  as fuzz
from skfuzzy import control as ctrl

# Defining fuzzy variables with refined and additional categories
age = ctrl.Antecedent(np.arange(20, 100, 1), 'age')
hypertension = ctrl.Antecedent(np.arange(0, 2, 1), 'hypertension')
genetic_disorder = ctrl.Antecedent(np.arange(0, 2, 1), 'genetic_disorder')
diabetes = ctrl.Antecedent(np.arange(0, 2, 1), 'diabetes')
smoking = ctrl.Antecedent(np.arange(0, 2, 1), 'smoking')
cholesterol = ctrl.Antecedent(np.arange(0, 300, 1), 'cholesterol')
cardio_history = ctrl.Antecedent(np.arange(0, 2, 1), 'cardio_history')
gender = ctrl.Antecedent(np.arange(0, 2, 1), 'gender')
stroke_risk = ctrl.Consequent(np.arange(0, 101, 1), 'stroke_risk')
blood_pressure = ctrl.Antecedent(np.arange(60, 200, 1), 'blood_pressure')
bmi = ctrl.Antecedent(np.arange(15, 50, 1), 'bmi')
prior_stroke = ctrl.Antecedent(np.arange(0, 2, 1), 'prior_stroke')
medication = ctrl.Antecedent(np.arange(0, 2, 1), 'medication')
stenosis_severity = ctrl.Antecedent(np.arange(0, 100, 1), 'stenosis_severity')  
anesthesia_type = ctrl.Antecedent(np.arange(0, 2, 1), 'anesthesia_type')  
surgery_duration = ctrl.Antecedent(np.arange(30, 181, 1), 'surgery_duration')  
intraoperative_complications = ctrl.Antecedent(np.arange(0, 2, 1), 'intraoperative_complications')  
stroke_risk_term = ctrl.Consequent(np.arange(0, 101, 1), 'stroke_risk_term')



# Membership functions refinement and additions for age
age['young'] = fuzz.trimf(age.universe, [20, 20, 35])
age['middle_aged'] = fuzz.trimf(age.universe, [30, 50, 70])
age['old'] = fuzz.trimf(age.universe, [65, 75, 85])
age['very_old'] = fuzz.trimf(age.universe, [80, 90, 100])

binary_no = [0, 0, 1]
binary_yes = [0, 1, 1]

# Blood pressure adjustments
blood_pressure['low'] = fuzz.trimf(blood_pressure.universe, [60, 60, 90])
blood_pressure['normal'] = fuzz.trimf(blood_pressure.universe, [80, 120, 160])
blood_pressure['high'] = fuzz.trimf(blood_pressure.universe, [140, 160, 180])
blood_pressure['very_high'] = fuzz.trimf(blood_pressure.universe, [170, 190, 200])

# Cholesterol levels adjustments
cholesterol['low'] = fuzz.trimf(cholesterol.universe, [0, 0, 200])
cholesterol['borderline'] = fuzz.trimf(cholesterol.universe, [180, 200, 240])
cholesterol['high'] = fuzz.trimf(cholesterol.universe, [220, 240, 270])
cholesterol['very_high'] = fuzz.trimf(cholesterol.universe, [260, 300, 300])

# BMI refinement for obesity thresholds
bmi['underweight'] = fuzz.trimf(bmi.universe, [15, 15, 18.5])
bmi['normal'] = fuzz.trimf(bmi.universe, [18.5, 22.5, 25])
bmi['overweight'] = fuzz.trimf(bmi.universe, [24, 27, 30])
bmi['obese'] = fuzz.trimf(bmi.universe, [29, 35, 50])

prior_stroke['no'] = fuzz.trimf(prior_stroke.universe, binary_no)
prior_stroke['yes'] = fuzz.trimf(prior_stroke.universe, binary_yes)

medication['no'] = fuzz.trimf(medication.universe, binary_no)
medication['yes'] = fuzz.trimf(medication.universe, binary_yes)

hypertension['no'] = fuzz.trimf(hypertension.universe, binary_no)
hypertension['yes'] = fuzz.trimf(hypertension.universe, binary_yes)

genetic_disorder['no'] = fuzz.trimf(genetic_disorder.universe, binary_no)
genetic_disorder['yes'] = fuzz.trimf(genetic_disorder.universe, binary_yes)

diabetes['no'] = fuzz.trimf(diabetes.universe, binary_no)
diabetes['yes'] = fuzz.trimf(diabetes.universe, binary_yes)

smoking['no'] = fuzz.trimf(smoking.universe, binary_no)
smoking['yes'] = fuzz.trimf(smoking.universe, binary_yes)

cardio_history['no'] = fuzz.trimf(cardio_history.universe, binary_no)
cardio_history['yes'] = fuzz.trimf(cardio_history.universe, binary_yes)

gender['female'] = fuzz.trimf(gender.universe, binary_no)  # 0 for female
gender['male'] = fuzz.trimf(gender.universe, binary_yes)    # 1 for male

# Membership function for cholesterol
cholesterol['low'] = fuzz.trimf(cholesterol.universe, [0, 0, 200])
cholesterol['borderline'] = fuzz.trimf(cholesterol.universe, [150, 200, 250])
cholesterol['high'] = fuzz.trimf(cholesterol.universe, [200, 300, 300])

# Refined stroke risk categories
stroke_risk['low'] = fuzz.trimf(stroke_risk.universe, [0, 0, 33])
stroke_risk['moderate'] = fuzz.trimf(stroke_risk.universe, [20, 50, 80])
stroke_risk['high'] = fuzz.trimf(stroke_risk.universe, [60, 100, 100])


# Defining membership functions for the new antecedents
stenosis_severity['low'] = fuzz.trimf(stenosis_severity.universe, [0, 0, 50])
stenosis_severity['moderate'] = fuzz.trimf(stenosis_severity.universe, [30, 50, 70])
stenosis_severity['severe'] = fuzz.trimf(stenosis_severity.universe, [60, 80, 100])

anesthesia_type['local'] = fuzz.trimf(anesthesia_type.universe, [0, 0, 1])  # Simplified representation
anesthesia_type['general'] = fuzz.trimf(anesthesia_type.universe, [1, 1, 1])

surgery_duration['short'] = fuzz.trimf(surgery_duration.universe, [30, 30, 60])
surgery_duration['medium'] = fuzz.trimf(surgery_duration.universe, [50, 90, 130])
surgery_duration['long'] = fuzz.trimf(surgery_duration.universe, [120, 180, 180])

intraoperative_complications['no'] = fuzz.trimf(intraoperative_complications.universe, [0, 0, 1])
intraoperative_complications['yes'] = fuzz.trimf(intraoperative_complications.universe, [1, 1, 1])

stroke_risk_term['short_term'] = fuzz.trimf(stroke_risk_term.universe, [0, 0, 50])  # Considering up to 50% as short-term risk
stroke_risk_term['long_term'] = fuzz.trimf(stroke_risk_term.universe, [50, 100, 100])  # Above 50% to 100% as long-term risk


# Adding complex interactions and rule weighting in the rule base
rules = [
    ctrl.Rule(age['young'] & hypertension['no'] & genetic_disorder['no'], stroke_risk['low']),
    ctrl.Rule(hypertension['yes'] | diabetes['yes'], stroke_risk['moderate']),
    ctrl.Rule(age['old'] | genetic_disorder['yes'] | (cholesterol['high'] & smoking['yes']), stroke_risk['high']),
    ctrl.Rule(smoking['yes'] & cardio_history['yes'], stroke_risk['high']),
    ctrl.Rule(gender['male'] & age['middle_aged'] & cholesterol['borderline'], stroke_risk['moderate']),
    ctrl.Rule(blood_pressure['high'] | bmi['overweight'], stroke_risk['moderate']),
    ctrl.Rule(prior_stroke['yes'] | (blood_pressure['very_high'] & medication['yes']), stroke_risk['high']),
    ctrl.Rule(age['very_old'] & blood_pressure['very_high'] & diabetes['yes'], stroke_risk['high']),
    ctrl.Rule(age['very_old'] & blood_pressure['very_high'] & prior_stroke['yes'], stroke_risk['high'], ),
    ctrl.Rule(stenosis_severity['severe'] | anesthesia_type['general'], stroke_risk['high']),
    ctrl.Rule(surgery_duration['long'] | intraoperative_complications['yes'], stroke_risk['high']),
    ctrl.Rule(stenosis_severity['moderate'] & surgery_duration['medium'], stroke_risk['moderate']),
    ctrl.Rule(anesthesia_type['local'] & intraoperative_complications['no'], stroke_risk['low']),
    ctrl.Rule((stenosis_severity['severe'] | surgery_duration['long']) & intraoperative_complications['yes'], stroke_risk_term['long_term']),
    ctrl.Rule(stenosis_severity['moderate'] & surgery_duration['medium'] & intraoperative_complications['no'], stroke_risk_term['short_term']),
]

# Initialize the fuzzy control system with the updated rules
stroke_risk_ctrl = ctrl.ControlSystem(rules)
stroke_risk_sim = ctrl.ControlSystemSimulation(stroke_risk_ctrl)

# Function to calculate stroke risk using fuzzy logic (from your code)
def calculate_fuzzy_stroke_risk(age, hypertension, genetic_disorder, diabetes, smoking, cholesterol, cardio_history, gender, blood_pressure, bmi, prior_stroke, medication, stenosis_severity, anesthesia_type, surgery_duration, intraoperative_complications):
    # Set inputs to the fuzzy logic system
    stroke_risk_sim.input['age'] = age
    stroke_risk_sim.input['hypertension'] = hypertension
    stroke_risk_sim.input['genetic_disorder'] = genetic_disorder
    stroke_risk_sim.input['diabetes'] = diabetes
    stroke_risk_sim.input['smoking'] = smoking
    stroke_risk_sim.input['cholesterol'] = cholesterol
    stroke_risk_sim.input['cardio_history'] = cardio_history
    stroke_risk_sim.input['gender'] = gender
    stroke_risk_sim.input['blood_pressure'] = blood_pressure
    stroke_risk_sim.input['bmi'] = bmi
    stroke_risk_sim.input['prior_stroke'] = prior_stroke
    stroke_risk_sim.input['medication'] = medication
    stroke_risk_sim.input['stenosis_severity'] = stenosis_severity
    stroke_risk_sim.input['anesthesia_type'] = anesthesia_type
    stroke_risk_sim.input['surgery_duration'] = surgery_duration
    stroke_risk_sim.input['intraoperative_complications'] = intraoperative_complications
    
    
    try:
        # Compute the result
        stroke_risk_sim.compute()
        return stroke_risk_sim.output['stroke_risk']
    except ValueError:
        # Default stroke risk value in case no rules are activated
        default_stroke_risk_value = 50  # Adjust this as per your requirement
        return default_stroke_risk_value
    
    # Compute and return the result
    stroke_risk_sim.compute()
    return stroke_risk_sim.output['stroke_risk']


stroke_risk_ctrl = ctrl.ControlSystem(rules)
stroke_risk_sim = ctrl.ControlSystemSimulation(stroke_risk_ctrl)

# Function to fetch values from UI and calculate risk
def calculate_and_display_risk():
    try:
        # Fetching values from the UI, adjusted for checkboxes
        age_val = age_scale.get()
        hypertension_val = hypertension_var.get()
        genetic_disorder_val = genetic_disorder_var.get()
        diabetes_val = diabetes_var.get()
        smoking_val = smoking_var.get()
        cholesterol_val = cholesterol_scale.get()
        cardio_history_val = cardio_history_var.get()
        gender_val = gender_var.get()
        blood_pressure_val = blood_pressure_scale.get()
        bmi_val = bmi_scale.get()
        prior_stroke_val = prior_stroke_var.get()
        medication_val = medication_var.get()
        stenosis_severity_val = stenosis_severity_var.get()
        anesthesia_type_val = anesthesia_type_var.get()
        surgery_duration_val = surgery_duration_var.get()
        intraoperative_complications_val = intraoperative_complications_var.get()
        


        # Calculate risk
        base_risk = calculate_fuzzy_stroke_risk(age_val, hypertension_val, genetic_disorder_val, diabetes_val, smoking_val, cholesterol_val, cardio_history_val, gender_val, blood_pressure_val, bmi_val, prior_stroke_val, medication_val, stenosis_severity_val, anesthesia_type_val, surgery_duration_val, intraoperative_complications_val)
        short_term_risk = base_risk * 1.1  
        long_term_risk = base_risk * 0.9
        # Display result
        messagebox.showinfo("Stroke Risk Result", f"Short-term (15 days) Stroke Risk: {short_term_risk:.2f}%\nLong-term (6 months) Stroke Risk: {long_term_risk:.2f}%")
    except ValueError as e:
        messagebox.showerror("Error", "Invalid input. Please enter valid numbers.")

# Create the main window
window = tk.Tk()
window.title("Stroke Risk Prediction")

hypertension_var = tk.IntVar()
genetic_disorder_var = tk.IntVar()
diabetes_var = tk.IntVar()
smoking_var = tk.IntVar()
cardio_history_var = tk.IntVar()
gender_var = tk.IntVar()  # Adjusted for Male/Female as 1/0
prior_stroke_var = tk.IntVar()
medication_var = tk.IntVar()
stenosis_severity_var = tk.IntVar()
anesthesia_type_var = tk.IntVar()
surgery_duration_var = tk.IntVar()
intraoperative_complications_var = tk.IntVar()


tk.Checkbutton(window, text="Hypertension", variable=hypertension_var).pack()
tk.Checkbutton(window, text="Genetic Disorder", variable=genetic_disorder_var).pack()
tk.Checkbutton(window, text="Diabetes", variable=diabetes_var).pack()
tk.Checkbutton(window, text="Smoking", variable=smoking_var).pack()
tk.Checkbutton(window, text="Cardio History", variable=cardio_history_var).pack()
tk.Checkbutton(window, text="Male", variable=gender_var).pack()  # For simplicity, only Male checkbox. Adjust as needed.
tk.Checkbutton(window, text="Prior Stroke", variable=prior_stroke_var).pack()
tk.Checkbutton(window, text="Medication", variable=medication_var).pack()
tk.Label(window, text="Stenosis Severity (%):").pack()
tk.Scale(window, from_=0, to=100, orient=tk.HORIZONTAL, variable=stenosis_severity_var).pack()

tk.Label(window, text="Anesthesia Type (0 for Local, 1 for General):").pack()
tk.Scale(window, from_=0, to=1, orient=tk.HORIZONTAL, variable=anesthesia_type_var).pack()

tk.Label(window, text="Surgery Duration (mins):").pack()
tk.Scale(window, from_=30, to=180, orient=tk.HORIZONTAL, variable=surgery_duration_var).pack()

tk.Checkbutton(window, text="Intraoperative Complications (Yes/No)", variable=intraoperative_complications_var).pack()

# Age
tk.Label(window, text="Age:").pack()
age_scale = tk.Scale(window, from_=20, to=100, orient=tk.HORIZONTAL)
age_scale.pack()

# Cholesterol
tk.Label(window, text="Cholesterol (mg/dL):").pack()
cholesterol_scale = tk.Scale(window, from_=0, to=300, orient=tk.HORIZONTAL)
cholesterol_scale.pack()

# Blood Pressure
tk.Label(window, text="Blood Pressure (mmHg):").pack()
blood_pressure_scale = tk.Scale(window, from_=60, to=200, orient=tk.HORIZONTAL)
blood_pressure_scale.pack()

# BMI
tk.Label(window, text="BMI:").pack()
bmi_scale = tk.Scale(window, from_=15, to=50, orient=tk.HORIZONTAL)
bmi_scale.pack()

# Calculate button
calculate_button = tk.Button(window, text="Calculate Risk", command=calculate_and_display_risk)
calculate_button.pack()

# Run the application
window.mainloop()
